function [ ] = plot_graph( )
% Function created to aid plotting data generated by 'LNLS-SR calculations'

global Mag S Z Bz Bs S_hd Z_hd Bs_hd Bz_hd E_char X Xs PS_x Xp Y Ys Yp PS_y P P_char
global num nat_size nat_div E delta_tv div_tv delta_th div_th  F_flux ph_flux 
global F_brilliance brilliance F_cohflux coh_flux coh_frac

%%%%%%%%%%%%%%%%%%%
% Magnetic fields %
%%%%%%%%%%%%%%%%%%%
if Mag == 1
    Bz_hd = sqrt(Bz_hd.*Bz_hd).^0.25;    % Gamma correction
    Bs_hd = sqrt(Bs_hd.*Bs_hd).^0.25;    % Gamma correction
    
    figure('name','Vertical magnetic field')
    set(gcb,'fontsize',14,'fontweight','demi')
    surf(S,Z,Bz)
    alpha(0.65)
    title('Magnetic Field - Vertical Component','FontSize',16)
    xlabel('Ondulator Lenght [mm]','FontSize',16)
    ylabel('Gap size [mm]','FontSize',16)
    zlabel('Undulator Magnetic field [T]','FontSize',16)
    colormap('cool')
    saveas( gcf, 'mag_field_vert', 'png' ); % Generates a .tif image
    
    figure('name','Magnetic field - prop. axis')
    set(gcb,'fontsize',14,'fontweight','demi')
    surf(S,Z,Bs)
    alpha(0.65)
    title('Magnetic Field - Propagation axis','FontSize',16)
    xlabel('Ondulator Lenght [mm]','FontSize',16)
    ylabel('Gap size [mm]','FontSize',16)
    zlabel('Undulator Magnetic field [T]','FontSize',16)
    colormap('cool')
    saveas( gcf, 'mag_field_prop', 'png' ); % Generates a .tif image
    
    figure('name','2D Magnetic field - vertical')
    set(gcb,'fontsize',14,'fontweight','demi')
    imagesc(S_hd(1,:), Z_hd(:,1),Bz_hd)
    title('Magnetic Field - Vertical Component','FontSize',16)
    xlabel('Ondulator Lenght [mm]','FontSize',16)
    ylabel('Gap size [mm]','FontSize',16)
    colormap('cool')
    colorbar
    saveas( gcf, 'mag_field_vert_2d', 'png' ); % Generates a .tif image

    figure('name',' 2D Magnetic field - prop. axis')
    set(gcb,'fontsize',14,'fontweight','demi')
    imagesc(S_hd(1,:), Z_hd(:,1),Bs_hd) 
    title('Magnetic Field - Propagation axis','FontSize',16)
    xlabel('Ondulator Lenght [mm]','FontSize',16)
    ylabel('Gap size [mm]','FontSize',16)
    colormap('cool')
    colorbar
    saveas( gcf, 'mag_field_prop_2d', 'png' ); % Generates a .tif image
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Electron beam Phase-space %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if E_char == 1
    figure('name','h_phase_space');
    set(gca,'fontsize',14,'fontweight','demi')
    imagesc(Xs(1,:), Xp(:,1),PS_x)
    axis('image')
    title('Electron beam horizontal phase space','FontSize',16)
    xlabel('Horizontal size [\mum]','FontSize',16)
    ylabel('Horizontal divergence [\murad]','FontSize',16)
    colormap('hot')
    colorbar
    saveas( gcf, 'e_beam_hor_phase_space', 'png' ); % Generates a .tif image

    figure('name','v_phase_space');
    set(gca,'fontsize',14,'fontweight','demi')
    imagesc(Ys(1,:), Yp(:,1),PS_y)
    axis('image')
    title('Electron beam vertical phase space','FontSize',16)
    xlabel('Vertical size [\mum]','FontSize',16)
    ylabel('Vertical divergence [\murad]','FontSize',16)
    colormap('hot')
    colorbar
    saveas( gcf, 'e_beam_ver_phase_space', 'png' ); % Generates a .tif image

    figure('name','profile');
    set(gca,'fontsize',14,'fontweight','demi')
    imagesc(X(1,:), Y(:,1),P)
    axis('image')
    title('Electron beam profile - low \beta straight section','FontSize',16)
    xlabel('Horizontal size [\mum]','FontSize',16)
    ylabel('Vertical size [\mum]','FontSize',16)
    colormap('hot')
    colorbar
    saveas( gcf, 'e_beam_profile', 'png' ); % Generates a .tif image
end
%%%%%%%%%%%%%%%%%%%
% Characteristics %
%%%%%%%%%%%%%%%%%%%
if P_char == 1
    figure('name','Natural size')
    set(gca,'fontsize',14,'fontweight','demi')
    for i=1:num
        E_div = E;
    	E_div(nat_size(i,:)==0)=[];
    	aux_nat_size = nat_size(i,:);
    	aux_nat_size(aux_nat_size==0)=[];
    	hold on
    	plot(E_div, aux_nat_size,'Color','r','LineWidth',2);
        title('UNDULATOR','FontSize',16)
        xlabel('Energy [keV]','FontSize',16);
        ylabel('Natural size [\mum]','FontSize',16);
        grid on;
    end
    saveas( gcf, 'nat_size', 'png' ); % Generates a .tif image
    
    figure('name','Natural divergence')
    set(gca,'fontsize',12,'fontweight','demi')
    
    for i=1:num
        E_div = E;
        E_div(nat_div(i,:)==0)=[];
        aux_nat_div = nat_div(i,:);
        aux_nat_div(aux_nat_div==0)=[];
        hold on
        plot(E_div, aux_nat_div,'Color','r','LineWidth',2);
        title('UNDULATOR','FontSize',16)
        xlabel('Energy [keV]','FontSize',16);
        ylabel('Natural divergence [\murad]','FontSize',16);
        grid on;
    end
    saveas( gcf, 'nat_div', 'png' ); % Generates a .tif image

    figure('name','Vertical size')
    set(gca,'fontsize',14,'fontweight','demi')
    for i=1:num
        E_delta = E;
        E_delta(delta_tv(i,:)==0)=[];
        aux_delta_tv = delta_tv(i,:);
        aux_delta_tv(aux_delta_tv==0)=[];
        hold on
        plot(E_delta, aux_delta_tv,'Color','r','LineWidth',2);
        title('UNDULATOR IVU19','FontSize',16)
        xlabel('Energy [keV]','FontSize',16);
        ylabel('Vertical size [\mum]','FontSize',16);
        grid on;
    end    
    saveas( gcf, 'vert_size', 'png' ); % Generates a .tif image    
    
    figure('name','Vertical divergence')
    set(gca,'fontsize',14,'fontweight','demi')
    for i=1:num
        E_div = E;
        E_div(div_tv(i,:)==0)=[];
        aux_div_tv = div_tv(i,:);
        aux_div_tv(aux_div_tv==0)=[];
        hold on
        plot(E_div, aux_div_tv,'Color','r','LineWidth',2);
        title('UNDULATOR','FontSize',16)
        xlabel('Energy [keV]','FontSize',16);
        ylabel('Vertical divergence [\murad]','FontSize',16);
        grid on;
    end  
    saveas( gcf, 'vert_div', 'png' ); % Generates a .tif image
    
    figure('name','Horizontal size')
    set(gca,'fontsize',16,'fontweight','demi')
    for i=1:num
    	E_delta = E;
    	E_delta(delta_th(i,:)==0)=[];
        aux_delta_th = delta_th(i,:);
        aux_delta_th(aux_delta_th==0)=[];
        hold on
        plot(E_delta, aux_delta_th,'Color','r','LineWidth',2);
        title('UNDULATOR','FontSize',16)
        xlabel('Energy [keV]','FontSize',16);
        ylabel('Horizontal size [\mum]','FontSize',16);
        grid on;
    end
    saveas( gcf, 'hor_size', 'png' ); % Generates a .tif image
    
    figure('name','Horizontal divergence')
    set(gca,'fontsize',14,'fontweight','demi')
    for i=1:num
        E_div = E;
        E_div(div_th(i,:)==0)=[];
        aux_div_th = div_th(i,:);
        aux_div_th(aux_div_th==0)=[];
        hold on
        plot(E_div, aux_div_th,'Color','r','LineWidth',2);
        title('UNDULATOR','FontSize',16)
        xlabel('Energy [keV]','FontSize',16);
        ylabel('Horizontal divergence [\murad]','FontSize',16);
        grid on;
    end
    saveas( gcf, 'hor_div', 'png' ); % Generates a .tif image
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Photon Flux [Ph/s/1% bandwidth]  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if F_flux == 1
    figure('name','Photon Flux')
    set(gca,'fontsize',14,'fontweight','demi')
    loglog(E, ph_flux,'Color','r','LineWidth',2);
    title('UNDULATOR IVU19','FontSize',16)
    xlabel('Energy [keV]','FontSize',16);
    ylabel('Photon Flux [photons/s/0.1%BW]','FontSize',16);
    grid on;
    saveas( gcf, 'ph_flux', 'png' ); % Generates a .tif image
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Brilliance [Ph/s/mm²/mrad²/0.1%BW %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if F_brilliance == 1
    figure('name','Brilliance')
    set(gca,'fontsize',14,'fontweight','demi')
    loglog(E, brilliance,'Color','r','LineWidth',2);
    title('UNDULATOR','FontSize',16)
    xlabel('Energy [keV]','FontSize',16);
    ylabel('Brilliance [photons/s/mm^2/mrad^2/0.1%BW]','FontSize',16);
    grid on;
    saveas( gcf, 'brightness', 'png' ); % Generates a .tif image 
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Coherent flux [Ph/s/1% bandwidth] %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if F_cohflux == 1
    figure('name','Coherent flux')
    set(gca,'fontsize',14,'fontweight','demi')
    loglog(E, coh_flux,'Color','r','LineWidth',2);
    title('UNDULATOR','FontSize',16)
    xlabel('Energy [keV]','FontSize',16);
    ylabel('Coherent Flux [photons/s/0.1%BW]','FontSize',16);
    grid on;
    saveas( gcf, 'coherent_flux', 'png' ); % Generates a .tif image
    
    figure('name','Coherent fraction')
    set(gca,'fontsize',14,'fontweight','demi')
    loglog(E, coh_frac,'Color','r','LineWidth',2);
    title('UNDULATOR','FontSize',14)
    xlabel('Energy [keV]','FontSize',14);
    ylabel('Coherent Fraction [%]','FontSize',14);
    grid on;
    saveas( gcf, 'coherent_frac', 'png' ); % Generates a .tif image
end

end

